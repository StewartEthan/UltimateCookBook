/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package user_interface;

// Import all cookbook code
import java.nio.file.Files;
import java.nio.file.Paths;
import ultimatecookbook.*;

// Imports for Swing
import javax.swing.DefaultListModel;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListDataEvent;
import javax.swing.JOptionPane;
import javax.swing.DefaultComboBoxModel;

// Import for I/O
import java.io.*;

/**
 *
 * @author Ethan Stewart
 */
public class UltimateCookBookUI extends javax.swing.JFrame {

    /**
     * Creates new form UltimateCookBookUI
     */
    public UltimateCookBookUI() {
        initComponents();
        
        // Read all recipes into memory
        allRecipes = Recipe.readAllRecipes();
        
        // List each recipe title in the recipe list
        this.addRecipesToViewList(allRecipes);
        
        // Add listeners
        recipeListListener();
        listDataListener();
        
        // Start with first recipe selected
        this.viewRecipeList.setSelectedIndex(0);
        
        // Set the minimum match dropdown to start at 1
        resetDropDown();
    }
    
    // Display the recipe selected in the list
    private void recipeListListener() {
        viewRecipeList.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                // Find the recipe from the selected title
                String title = (String) viewRecipeList.getSelectedValue();
                boolean found = false;
                for (Recipe r : allRecipes) {
                    if (r.getTitle().equals(title)) {
                        // Display the recipe in the main viewing pane
                        viewRecipeEditorPane.setText(r.printableRecipe());
                
                        // Update found and stop the loop
                        found = true;
                        break;
                    }
                }
        
                if (!found && viewRecipeList.getSelectedIndex() >= 0) {
                    disableFrame();
                    new ErrorMessageUI("Selected recipe not found", "Kitty's Cookbook");
                }
            }
        });
    }
    
    private void disableFrame() {
        this.setEnabled(false);
    }
    
    // Dynamically change numbers in drop down list
    private void listDataListener() {
        searchIngList.getModel().addListDataListener(new ListDataListener() {
            // Override of contentsChanged required
            @Override
            public void contentsChanged(ListDataEvent event) {
                if (searchIngList.getModel().getSize() <= 4) {
                    DefaultComboBoxModel d = new DefaultComboBoxModel();
                    for (int i = 1; i <= searchIngList.getModel().getSize(); i++) {
                        d.addElement(Integer.toString(i));
                    }
                    ingsToMatchDropDown.setModel(d);
                }
            }
            
            // Removes a number if list of ingredients is too small
            @Override
            public void intervalRemoved(ListDataEvent event) {
                if (searchIngList.getModel().getSize() <= 4) {
                    DefaultComboBoxModel d = new DefaultComboBoxModel();
                    for (int i = 1; i <= searchIngList.getModel().getSize(); i++) {
                        d.addElement(Integer.toString(i));
                    }
                    ingsToMatchDropDown.setModel(d);
                }
            }
            
            // Adds up to four numbers based on ingredient list size
            @Override
            public void intervalAdded(ListDataEvent event) {
                if (searchIngList.getModel().getSize() <= 4) {
                    DefaultComboBoxModel d = new DefaultComboBoxModel();
                    for (int i = 1; i <= searchIngList.getModel().getSize(); i++) {
                        d.addElement(Integer.toString(i));
                    }
                    ingsToMatchDropDown.setModel(d);
                }
            }
        });
    }

    // Reset minimum match dropdown to 1
    private void resetDropDown() {
        DefaultComboBoxModel d = new DefaultComboBoxModel();
        d.addElement(Integer.toString(1));
        ingsToMatchDropDown.setModel(d);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        viewRecipeList = new javax.swing.JList();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        createTitleTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        createDirectionsTextArea = new javax.swing.JTextArea();
        addIngTextField = new javax.swing.JTextField();
        addCreateIngButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        createIngList = new javax.swing.JList();
        editCreateIngButton = new javax.swing.JButton();
        removeCreateIngButton = new javax.swing.JButton();
        addNewRecipeButton = new javax.swing.JButton();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viewRecipeEditorPane = new javax.swing.JEditorPane();
        searchIngButton = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        viewAllRecipesButton = new javax.swing.JButton();
        deleteRecipeButton = new javax.swing.JButton();
        editSearchIngButton = new javax.swing.JButton();
        removeSearchIngButton = new javax.swing.JButton();
        searchIngTextField = new javax.swing.JTextField();
        addIngSearchButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        searchIngList = new javax.swing.JList();
        editRecipeButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        ingsToMatchDropDown = new javax.swing.JComboBox();
        searchTitleButton = new javax.swing.JButton();
        searchTitleTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kitty's Cookbook");

        jLabel1.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Kitty's Cookbook");

        jScrollPane2.setPreferredSize(new java.awt.Dimension(100, 186));

        viewRecipeList.setFont(new java.awt.Font("Berlin Sans FB", 0, 18)); // NOI18N
        viewRecipeList.setModel(new DefaultListModel());
        jScrollPane2.setViewportView(viewRecipeList);

        jLabel2.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 22)); // NOI18N
        jLabel2.setText("Recipe List");

        jLabel3.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 22)); // NOI18N
        jLabel3.setText("Add New Recipe");

        jLabel4.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 22)); // NOI18N
        jLabel4.setText("View Recipe");

        jLabel5.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel5.setText("Title");

        createTitleTextField.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel6.setText("Ingredients");

        jLabel7.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel7.setText("Directions");

        createDirectionsTextArea.setColumns(20);
        createDirectionsTextArea.setFont(new java.awt.Font("Berlin Sans FB", 0, 16)); // NOI18N
        createDirectionsTextArea.setRows(5);
        jScrollPane3.setViewportView(createDirectionsTextArea);

        addIngTextField.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N

        addCreateIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        addCreateIngButton.setText("Add to Ingredients");
        addCreateIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCreateIngButtonActionPerformed(evt);
            }
        });

        createIngList.setFont(new java.awt.Font("Berlin Sans FB", 0, 16)); // NOI18N
        createIngList.setModel(new DefaultListModel());
        createIngList.setMaximumSize(new java.awt.Dimension(50, 105));
        jScrollPane4.setViewportView(createIngList);

        editCreateIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        editCreateIngButton.setText("Edit Selected");
        editCreateIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCreateIngButtonActionPerformed(evt);
            }
        });

        removeCreateIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        removeCreateIngButton.setText("Remove Selected");
        removeCreateIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCreateIngButtonActionPerformed(evt);
            }
        });

        addNewRecipeButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        addNewRecipeButton.setText("Add Recipe");
        addNewRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNewRecipeButtonActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel8.setText("Search by Name");

        viewRecipeEditorPane.setEditable(false);
        viewRecipeEditorPane.setFont(new java.awt.Font("Berlin Sans FB", 0, 20)); // NOI18N
        jScrollPane1.setViewportView(viewRecipeEditorPane);

        searchIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        searchIngButton.setText("Search");
        searchIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchIngButtonActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Berlin Sans FB Demi", 0, 18)); // NOI18N
        jLabel9.setText("Search by Ingredients");

        viewAllRecipesButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        viewAllRecipesButton.setText("View All");
        viewAllRecipesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAllRecipesButtonActionPerformed(evt);
            }
        });

        deleteRecipeButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        deleteRecipeButton.setText("Delete");
        deleteRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteRecipeButtonActionPerformed(evt);
            }
        });

        editSearchIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        editSearchIngButton.setText("Edit Selected");
        editSearchIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editSearchIngButtonActionPerformed(evt);
            }
        });

        removeSearchIngButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        removeSearchIngButton.setText("Remove Selected");
        removeSearchIngButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeSearchIngButtonActionPerformed(evt);
            }
        });

        searchIngTextField.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N

        addIngSearchButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        addIngSearchButton.setText("Add to Search");
        addIngSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addIngSearchButtonActionPerformed(evt);
            }
        });

        searchIngList.setFont(new java.awt.Font("Berlin Sans FB", 0, 16)); // NOI18N
        searchIngList.setModel(new DefaultListModel());
        jScrollPane6.setViewportView(searchIngList);

        editRecipeButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        editRecipeButton.setText("Edit");
        editRecipeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editRecipeButtonActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        jLabel10.setText("Minimum ingredients to match:");

        ingsToMatchDropDown.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N
        ingsToMatchDropDown.setMaximumRowCount(4);
        ingsToMatchDropDown.setModel(new DefaultComboBoxModel());

        searchTitleButton.setFont(new java.awt.Font("Berlin Sans FB", 0, 11)); // NOI18N
        searchTitleButton.setText("Search");
        searchTitleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchTitleButtonActionPerformed(evt);
            }
        });

        searchTitleTextField.setFont(new java.awt.Font("Berlin Sans FB", 0, 14)); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(addNewRecipeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane3)
                        .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(addIngTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(addCreateIngButton))
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(editCreateIngButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(removeCreateIngButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addComponent(jLabel5)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(createTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jLabel7))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 473, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(190, 190, 190)
                        .addComponent(jLabel4)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(145, 145, 145))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(ingsToMatchDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel9)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(searchIngTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(addIngSearchButton))
                                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(viewAllRecipesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(editRecipeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(deleteRecipeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(searchTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchTitleButton, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(editSearchIngButton, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(removeSearchIngButton, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(searchIngButton, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(64, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(431, 431, 431))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(createTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addIngTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addCreateIngButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editCreateIngButton)
                            .addComponent(removeCreateIngButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addNewRecipeButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 238, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(viewAllRecipesButton)
                                .addComponent(editRecipeButton))
                            .addComponent(deleteRecipeButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchTitleButton)
                            .addComponent(searchTitleTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(searchIngTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addIngSearchButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editSearchIngButton)
                            .addComponent(removeSearchIngButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(ingsToMatchDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(searchIngButton))
                    .addComponent(jScrollPane1))
                .addContainerGap(64, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeCreateIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCreateIngButtonActionPerformed
        // Remove the selected element from the list
        ((DefaultListModel) createIngList.getModel()).removeElementAt(createIngList.getSelectedIndex());
    }//GEN-LAST:event_removeCreateIngButtonActionPerformed

    private void editCreateIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCreateIngButtonActionPerformed
        // Get the selected list item
        String selected = createIngList.getSelectedValue().toString();
        
        // Open the edit window
        this.setEnabled(false);
        new EditIngredientsUI(selected, "Kitty's Cookbook").setVisible(true);
    }//GEN-LAST:event_editCreateIngButtonActionPerformed

    private void viewAllRecipesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAllRecipesButtonActionPerformed
        // Change content of recipe list to all recipes
        this.addRecipesToViewList(allRecipes);
        
        // Clear all search fields
        this.searchTitleTextField.setText("");
        this.searchIngTextField.setText("");
        this.searchIngList.setModel(new DefaultListModel());
        resetDropDown();
        
        // Reset the recipe viewing pane
        this.viewRecipeList.setSelectedIndex(0);
        
    }//GEN-LAST:event_viewAllRecipesButtonActionPerformed

    private void editSearchIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editSearchIngButtonActionPerformed
        // Get the selected list item
        String selected = searchIngList.getSelectedValue().toString();
        
        // Open the edit window
        this.setEnabled(false);
        new EditIngredientsUI(selected, "Kitty's Cookbook", true).setVisible(true);
    }//GEN-LAST:event_editSearchIngButtonActionPerformed

    private void deleteRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteRecipeButtonActionPerformed
        // Confirm deletion
        String selectedTitle = (String) this.viewRecipeList.getSelectedValue();
        String message = "Are you sure you want to delete " +
                         selectedTitle + "?";
        int response = JOptionPane.showConfirmDialog(null, message, "Confirm", 
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        
        // Do nothing if no is selected or confirmation dialog is closed
        if (response == JOptionPane.NO_OPTION || response == JOptionPane.CLOSED_OPTION) {
            return;
        }
        
        // Proceed with deletion if yes is selected
        else if (response == JOptionPane.YES_OPTION) {
            // Determine the filename
            String filename = (String) this.viewRecipeList.getSelectedValue();
            for (int i = 0; i < filename.length(); i++) {
                if (filename.charAt(i) == ' ') {
                    filename = filename.substring(0, i) + '_' + filename.substring(i+1);
                }
            }

            // Attempt the deletion
            try {
                Files.delete(Paths.get("resources/recipes/" + filename.toLowerCase() + ".json"));
            }
            catch (IOException e) {
                this.setEnabled(false);
                new ErrorMessageUI("Could not delete", "Kitty's Cookbook");
            }

            // Update the list and clear the editor pane
            this.addRecipesToViewList(Recipe.readAllRecipes());
            this.allRecipes = Recipe.readAllRecipes();
            this.viewRecipeEditorPane.setText("");
            this.recipeListListener();
        }
    }//GEN-LAST:event_deleteRecipeButtonActionPerformed

    private void editRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editRecipeButtonActionPerformed
        // Find the recipe from the selected title
        String title = (String) viewRecipeList.getSelectedValue();
        boolean found = false;
        for (Recipe r : allRecipes) {
            if (r.getTitle().equals(title)) {
                // Open the edit recipe window
                this.setEnabled(false);
                new EditRecipeUI(r, "Kitty's Cookbook").setVisible(true);
                
                // Update found and stop the loop
                found = true;
                break;
            }
        }
        
        if (!found) {
            this.setEnabled(false);
            new ErrorMessageUI("Recipe for " + title + "\nwas not found", "Kitty's Cookbook");
        }
    }//GEN-LAST:event_editRecipeButtonActionPerformed

    private void addCreateIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCreateIngButtonActionPerformed
        // Get the value from the text field
        String ingToAdd = addIngTextField.getText();
        
        // If the value exists, add it to the list of ingredients 
        // and clear the text field
        if (ingToAdd != null && ingToAdd.length() > 0) {
            ((DefaultListModel) createIngList.getModel()).addElement(ingToAdd);
            addIngTextField.setText("");
        }
    }//GEN-LAST:event_addCreateIngButtonActionPerformed

    private void addNewRecipeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNewRecipeButtonActionPerformed
        // Get title, ingredients, and directions from appropriate components
        String title = createTitleTextField.getText();
        String directions = createDirectionsTextArea.getText();
        String[] ingredients = new String[createIngList.getModel().getSize()];
        for (int i = 0; i < ingredients.length; i++) {
            ingredients[i] = (String) createIngList.getModel().getElementAt(i);
        }
        
        // Ensure no components are empty
        boolean canCreate = true;
        if (title == null || title.length() <= 0) {
            this.setEnabled(false);
            new ErrorMessageUI("Title cannot\nbe empty", "Kitty's Cookbook");
            canCreate = false;
        }
        
        if (directions == null || directions.length() <= 0) {
            this.setEnabled(false);
            new ErrorMessageUI("Directions cannot\nbe empty", "Kitty's Cookbook");
            canCreate = false;
        }
        
        if (ingredients.length <= 0) {
            this.setEnabled(false);
            new ErrorMessageUI("You must have at\nleast one ingredient", "Kitty's Cookbook");
            canCreate = false;
        }
        
        for (String ing : ingredients) {
            if (ing == null || ing.length() <= 0) {
                this.setEnabled(false);
                new ErrorMessageUI("Blank ingredients\nnot permitted", "Kitty's Cookbook");
                canCreate = false;
            }
        }
        
        // If canCreate is still true, create the recipe
        if (canCreate) {
            Recipe r = new Recipe(title, ingredients, directions);
            r.writeRecipeToFile();
            
            // Also update the list and clear the fields
            allRecipes = Recipe.readAllRecipes();
            this.addRecipesToViewList(allRecipes);
            
            this.createTitleTextField.setText("");
            this.addIngTextField.setText("");
            this.createDirectionsTextArea.setText("");
            ((DefaultListModel) this.createIngList.getModel()).clear();
        }
    }//GEN-LAST:event_addNewRecipeButtonActionPerformed

    private void removeSearchIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeSearchIngButtonActionPerformed
        // Remove the selected element from the list
        ((DefaultListModel) searchIngList.getModel()).removeElementAt(searchIngList.getSelectedIndex());
    }//GEN-LAST:event_removeSearchIngButtonActionPerformed

    private void searchTitleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchTitleButtonActionPerformed
        // Create list of recipes with titles containing search criteria
        String criteria = this.searchTitleTextField.getText();
        DefaultListModel results = new DefaultListModel();
        for (Recipe r : this.allRecipes) {
            if (r.getTitle().toLowerCase().contains(criteria.toLowerCase())) {
                results.addElement(r.getTitle());
            }
        }
        
        // Update recipe list to contain only search results
        this.viewRecipeList.setModel(results);
        
        // Set the recipe viewing pane to show the recipe of the first result
        this.viewRecipeList.setSelectedIndex(0);
    }//GEN-LAST:event_searchTitleButtonActionPerformed

    private void addIngSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addIngSearchButtonActionPerformed
        // Get the value from the text field
        String ingToAdd = searchIngTextField.getText();
        
        // If the value exists, add it to the list of ingredients 
        // and clear the text field
        if (ingToAdd != null && ingToAdd.length() > 0) {
            ((DefaultListModel) searchIngList.getModel()).addElement(ingToAdd);
            searchIngTextField.setText("");
        }
    }//GEN-LAST:event_addIngSearchButtonActionPerformed

    private void searchIngButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchIngButtonActionPerformed
        // Get the ingredients list and minimum number to match
        DefaultListModel d = (DefaultListModel) searchIngList.getModel();
        String[] ingredients = new String[d.getSize()];
        
        for (int i = 0; i < ingredients.length; i++) {
            ingredients[i] = (String) d.getElementAt(i);
        }
        
        String minString = (String) ingsToMatchDropDown.getSelectedItem();
        int minimum = Integer.parseInt(minString);
        
        // Loop through all recipes and add ones that match to results
        DefaultListModel results = new DefaultListModel();
        for (Recipe r : this.allRecipes) {
            int matched = 0;
            for (String ing : r.getIngredients()) {
                // Determine if ing is a staple
                boolean isStaple = false;
                for (String staple : r.getStaples()) {
                    if (staple.toLowerCase().contains(ing.toLowerCase())) {
                        isStaple = true;
                        break;
                    }
                }
                
                // Don't check ing if it is a staple
                if (!isStaple) {
                    for (String ingredient : ingredients) {
                        if (ing.toLowerCase().contains(ingredient.toLowerCase())) {
                            matched++;
                            break;
                        }
                    }
                }
            }
            
            if (matched >= minimum) {
                results.addElement(r.getTitle());
            }
        }
        
        this.viewRecipeList.setModel(results);
        this.viewRecipeList.setSelectedIndex(0);
    }//GEN-LAST:event_searchIngButtonActionPerformed

    // GETTERS
    public javax.swing.JList getCreateList() {
        return createIngList;
    }
    
    public javax.swing.JList getViewList() {
        return viewRecipeList;
    }
    
    public javax.swing.JList getSearchList() {
        return searchIngList;
    }
    
    public Recipe[] getAllRecipes() {
        return allRecipes;
    }
    
    public javax.swing.JEditorPane getRecipeViewer() {
        return viewRecipeEditorPane;
    }
    
    // SETTERS
    public void setAllRecipes(Recipe[] r) {
        allRecipes = r;
        this.addRecipesToViewList(r);
    }
    
    // METHODS
    /**
     * Adds all recipe titles to list
     * @param list
     */
    public void addRecipesToViewList(Recipe[] list) {
        ((DefaultListModel) this.viewRecipeList.getModel()).clear();
        for (Recipe r : list) {
            ((DefaultListModel) this.viewRecipeList.getModel()).addElement(r.getTitle());
        }
    }
    
    public void resetRecipeViewer() {
        viewRecipeEditorPane.setText("");
    }
    
    public void selectRecipe(int index) {
        viewRecipeList.setSelectedIndex(index);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCreateIngButton;
    private javax.swing.JButton addIngSearchButton;
    private javax.swing.JTextField addIngTextField;
    private javax.swing.JButton addNewRecipeButton;
    private javax.swing.JTextArea createDirectionsTextArea;
    private javax.swing.JList createIngList;
    private javax.swing.JTextField createTitleTextField;
    private javax.swing.JButton deleteRecipeButton;
    private javax.swing.JButton editCreateIngButton;
    private javax.swing.JButton editRecipeButton;
    private javax.swing.JButton editSearchIngButton;
    private javax.swing.JComboBox ingsToMatchDropDown;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JButton removeCreateIngButton;
    private javax.swing.JButton removeSearchIngButton;
    private javax.swing.JButton searchIngButton;
    private javax.swing.JList searchIngList;
    private javax.swing.JTextField searchIngTextField;
    private javax.swing.JButton searchTitleButton;
    private javax.swing.JTextField searchTitleTextField;
    private javax.swing.JButton viewAllRecipesButton;
    private javax.swing.JEditorPane viewRecipeEditorPane;
    private javax.swing.JList viewRecipeList;
    // End of variables declaration//GEN-END:variables
    
    // CUSTOM MEMBER VARIABLES
    private Recipe[] allRecipes;
}
